{"version":3,"sources":["Components/Pokemon.js","Components/PokemonList.js","Components/Pokeinfo.js","App.js","reportWebVitals.js","assets/PKMN RBYGSC.ttf","index.js"],"names":["Pokemon","getColour","type","sortTypes","props","data","types","map","colour","name","text","className","style","backgroundColor","toUpperCase","loadPokemon","pokemon","selected","setState","state","this","selected_pokemon","indexNumber","order","onClick","background","color","width","loading","src","sprite","alt","fontSize","Component","PokemonList","getPokemonList","fetch","then","response","json","getPokemon","results","getSearchResult","console","log","toLowerCase","getSearchedPokemon","pokemonResults","abilities","height","weight","id","moves","count","stats","sprites","front_default","push","pokedata","forEach","url","length","sort","a","b","loaded","pokemonSelected","search","seleced_pokemon","undefined","clear","key","PokemonInfo","getStats","stat","base_stat","getAbilities","ability","tableLayout","border","padding","textAlign","App","onsearch","value","onKeyDown","do_search","searchChange","target","selectPokemon","pokelist","pokemoninfo","float","e","placeholder","onChange","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b5c52eb9.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n// Pokemon Class That has the sprite and quick details\r\nclass Pokemon extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            selected: false\r\n        };\r\n    }\r\n\r\n    // Colour codes for all the types\r\n    getColour = (type) => {\r\n        switch(type) {\r\n            case \"bug\":\r\n                return '#A8B820';\r\n            case \"dark\":\r\n                return '#705848';\r\n            case \"dragon\":\r\n                return '#7038F8';\r\n            case \"electric\":\r\n                return '#F8D030';\r\n            case \"fairy\":\r\n                return '#EE99AC';\r\n            case \"fighting\":\r\n                return '#C03028';\r\n            case \"fire\":\r\n                return '#F08030';\r\n            case \"flying\":\r\n                return '#A890F0';\r\n            case \"ghost\":\r\n                return '#705898';\r\n            case \"grass\":\r\n                return '#78C850';\r\n            case \"ground\":\r\n                return '#E0C068';\r\n            case \"ice\":\r\n                return '#98D8D8';\r\n            case \"normal\":\r\n                return '#A8A878';\r\n            case \"poison\":\r\n                return '#A040A0';\r\n            case \"psychic\":\r\n                return '#F85888';\r\n            case \"Rock\":\r\n                return '#B8A038';\r\n            case \"steel\":\r\n                return '#B8B8D0';\r\n            case \"water\":\r\n                return '#6890F0';\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    // Generates the type tags\r\n    sortTypes = () => {\r\n        let types = this.props.data.types;\r\n        return types.map(type => {\r\n            let colour = this.getColour(type.type.name);\r\n            let text = type.type.name;\r\n            return <span className=\"tag-type\" style={{backgroundColor: colour}}>{text.toUpperCase()}</span>\r\n                    \r\n        })\r\n        \r\n    }\r\n\r\n    // Passes the info to load more info on the pokemon\r\n    loadPokemon = () => {\r\n        let pokemon = this.props.data;\r\n        this.props.selected(pokemon);\r\n        this.setState({selected: true})\r\n    }\r\n\r\n    render() {\r\n\r\n        // checks if its selected or not, returns false if another pokemon is selected\r\n        if(this.props.selected_pokemon !== this.props.data && this.state.selected !== false){\r\n            this.setState({ selected: false })\r\n        }\r\n        let indexNumber = \"#00\" + this.props.data.order;\r\n        let types = this.sortTypes();\r\n\r\n        // Changes packground if its selected\r\n        if(this.state.selected){\r\n            return (\r\n                <table className=\"pokemon\" onClick={this.loadPokemon} style={{background:\"black\", color:'white'}}>\r\n                    <tr>\r\n                        <td style={{width:\"120px\"}}>\r\n                            <img loading=\"lazy\" src={this.props.data.sprite} alt={this.props.data.name} />\r\n                        </td>\r\n                        <td>\r\n                            <span>{indexNumber}</span>\r\n                            <p style={{fontSize: \"small\"}}>{this.props.data.name.toUpperCase()}</p>\r\n                            <div className=\"type-format\" >\r\n                            {types}\r\n                            </div>\r\n                        </td>\r\n                        \r\n                    </tr>\r\n                </table>\r\n            )\r\n        } else {\r\n            return (\r\n                <table className=\"pokemon\" onClick={this.loadPokemon}>\r\n                    <tr>\r\n                        <td style={{width:\"120px\"}}>\r\n                            <img loading=\"lazy\" src={this.props.data.sprite} alt={this.props.data.name} />\r\n                        </td>\r\n                        <td>\r\n                            <span>{indexNumber}</span>\r\n                            <p style={{fontSize: \"small\"}}>{this.props.data.name.toUpperCase()}</p>\r\n                            <div className=\"type-format\" >\r\n                            {types}\r\n                            </div>\r\n                        </td>\r\n                        \r\n                    </tr>\r\n                </table>\r\n        )\r\n        }\r\n        \r\n    }\r\n\r\n}\r\n\r\nexport default Pokemon;","import React, { Component } from 'react';\r\nimport Pokemon from './Pokemon';\r\n\r\n// Class that holds the table view\r\nclass PokemonList extends Component {\r\n  constructor() {\r\n      super();\r\n      this.state = {\r\n        loaded: false,\r\n        pokemon: [],\r\n        search: \"\",\r\n        seleced_pokemon: {}\r\n      };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getPokemonList()\r\n  }\r\n\r\n  // Returns a list of Pokemon name and API\r\n  getPokemonList = () => {\r\n      fetch(\"https://pokeapi.co/api/v2/pokemon?limit=151\")\r\n      .then(response => response.json())\r\n      .then(data => {\r\n          this.getPokemon(data.results);\r\n      })\r\n  }\r\n\r\n  getSearchResult = (pokemon) => {\r\n    console.log(pokemon);\r\n    fetch(\"https://pokeapi.co/api/v2/pokemon/\" + pokemon.toLowerCase())\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        console.log(data);\r\n          this.getSearchedPokemon(data);\r\n      })\r\n  }\r\n\r\n  getSearchedPokemon = (data) => {\r\n    let pokemonResults = [];\r\n    let pokemon = {\r\n      name: data.name,\r\n      abilities: data.abilities,\r\n      height: data.height,\r\n      weight: data.weight,\r\n      order: data.id,\r\n      moves: data.moves.count,\r\n      stats: data.stats,\r\n      types: data.types,\r\n      sprite: data.sprites.front_default\r\n    }\r\n    pokemonResults.push(pokemon)\r\n        this.setState({ pokemon: pokemonResults });\r\n  }\r\n\r\n  // loops through and calls each api\r\n  getPokemon = (pokedata) => {\r\n    let pokemonResults = [];\r\n      pokedata.forEach(pokemon => {\r\n        fetch(pokemon.url).then( response => response.json())\r\n        .then(data => {\r\n          console.log(data.moves.length);\r\n          // Creates the Pokemon object\r\n          let pokemon = {\r\n            name: data.name,\r\n            abilities: data.abilities,\r\n            height: data.height,\r\n            weight: data.weight,\r\n            order: data.id,\r\n            moves: data.moves.length,\r\n            stats: data.stats,\r\n            types: data.types,\r\n            sprite: data.sprites.front_default\r\n          }\r\n\r\n          pokemonResults.push(pokemon);\r\n\r\n          // Quick sort method to order by \"Order\" number\r\n          pokemonResults.sort(function(a, b){return a.order - b.order});\r\n\r\n          this.setState({ pokemon: pokemonResults, loaded: true });\r\n        })\r\n      })\r\n  }\r\n\r\n  pokemonSelected = (pokemon) => {\r\n      this.props.selected(pokemon);\r\n      this.setState({selected_pokemon: pokemon})\r\n  }\r\n  \r\n  render() {\r\n    // Does a search based in info in search field\r\n    if(this.props.data !== undefined && this.props.data !== \"\" && this.props.data !== this.state.search){\r\n        this.setState({ search: this.props.data });\r\n        this.getSearchResult(this.props.data);\r\n    }\r\n\r\n    // Resets the search if nothing is in search field\r\n    if(this.props.clear && this.state.search !== \"\"){\r\n        this.setState({ search: \"\" });\r\n        this.getPokemonList();\r\n    }\r\n\r\n    \r\n    let pokemon = this.state.pokemon.map((pokemon, key) => {\r\n        return <Pokemon key={key} data={pokemon} selected={this.pokemonSelected} selected_pokemon={this.state.selected_pokemon}></Pokemon>\r\n    })\r\n      return (\r\n          <div className=\"pokemon-list\">\r\n            {pokemon}\r\n          </div>\r\n      )\r\n  }\r\n\r\n}\r\n\r\nexport default PokemonList;","import React, { Component } from 'react';\r\n\r\n// Pokemon Class That has the sprite and quick details\r\nclass PokemonInfo extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {};\r\n    }\r\n\r\n    getColour = (type) => {\r\n        switch(type) {\r\n            case \"bug\":\r\n                return '#A8B820';\r\n            case \"dark\":\r\n                return '#705848';\r\n            case \"dragon\":\r\n                return '#7038F8';\r\n            case \"electric\":\r\n                return '#F8D030';\r\n            case \"fairy\":\r\n                return '#EE99AC';\r\n            case \"fighting\":\r\n                return '#C03028';\r\n            case \"fire\":\r\n                return '#F08030';\r\n            case \"flying\":\r\n                return '#A890F0';\r\n            case \"ghost\":\r\n                return '#705898';\r\n            case \"grass\":\r\n                return '#78C850';\r\n            case \"ground\":\r\n                return '#E0C068';\r\n            case \"ice\":\r\n                return '#98D8D8';\r\n            case \"normal\":\r\n                return '#A8A878';\r\n            case \"poison\":\r\n                return '#A040A0';\r\n            case \"psychic\":\r\n                return '#F85888';\r\n            case \"Rock\":\r\n                return '#B8A038';\r\n            case \"steel\":\r\n                return '#B8B8D0';\r\n            case \"water\":\r\n                return '#6890F0';\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    sortTypes = () => {\r\n        let types = this.props.data.types;\r\n        return types.map(type => {\r\n            let colour = this.getColour(type.type.name);\r\n            let text = type.type.name;\r\n            return <span className=\"tag-type\" style={{backgroundColor: colour}}>{text.toUpperCase()}</span>\r\n                    \r\n        })\r\n        \r\n    }\r\n\r\n    // Goes through API response and gets the name and base stats\r\n    getStats = () => {\r\n        let stats = this.props.data.stats;\r\n        return stats.map(stat => {\r\n            return <p >{stat.stat.name} {stat.base_stat}</p>\r\n        })\r\n    }\r\n\r\n    // Goes through the JSOn and generates the abilities\r\n    getAbilities = () => {\r\n        console.log(this.props.data)\r\n        let abilities = this.props.data.abilities;\r\n        return abilities.map(ability => {\r\n            return <span>{ability.ability.name}, </span>\r\n        })\r\n    }\r\n\r\n    // Displays all the information about the pokemon\r\n    render() {\r\n        let indexNumber = \"#00\" + this.props.data.order;\r\n        let types = this.sortTypes();\r\n        return (\r\n                <table onClick={this.loadPokemon}>\r\n                    <tr>\r\n                        <td >\r\n                            <img loading=\"lazy\" src={this.props.data.sprite} alt={this.props.data.name} />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                    <td>\r\n                            <span>{indexNumber}</span>\r\n                            <p style={{fontSize: \"small\"}}>{this.props.data.name.toUpperCase()}</p>\r\n                            <div className=\"type-format\" >\r\n                            {types}\r\n                            </div>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>\r\n                            <p>{this.getStats()}</p>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>\r\n                            <table width={'300px'} style={{tableLayout: 'fixed', border:'solid', padding:'10px'}} >\r\n                                <tr >\r\n                                    <td className=\"pokestat-padding\">\r\n                                        <span>Height </span>\r\n                                    </td>\r\n                                    <td className=\"pokestat-padding\" style={{textAlign: 'end'}}>\r\n                                        <span>{this.props.data.height}</span>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className=\"pokestat-padding\">\r\n                                    <span>Weight </span>\r\n                                    </td>\r\n                                    <td className=\"pokestat-padding\" style={{textAlign: 'end'}} >\r\n                                    <span>{this.props.data.weight}</span>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className=\"pokestat-padding\">\r\n                                        <span>Abilities</span>\r\n                                    </td>\r\n                                    <td className=\"pokestat-padding\" style={{textAlign: 'end'}}>\r\n                                        <span>{this.getAbilities()}</span>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className=\"pokestat-padding\">\r\n                                        <span>Moves</span>\r\n                                    </td>\r\n                                    <td className=\"pokestat-padding\" style={{textAlign: 'end'}}>\r\n                                        <span>{this.props.data.moves}</span>\r\n                                    </td>\r\n                                </tr>\r\n                            </table>\r\n                        </td>\r\n                    </tr>\r\n                </table>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default PokemonInfo;","import React, { Component } from 'react';\nimport './App.css';\nimport PokemonList from './Components/PokemonList';\nimport PokemonInfo from './Components/Pokeinfo';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      search: \"\",\n      do_search: false,\n      selected_pokemon: undefined\n    };\n  }\n\n  onsearch = (value) => {\n    if(value === \"search\" || value.onKeyDown === 13) {\n      this.setState({ do_search: true })\n    }\n  }\n\n  searchChange = (value) => {\n    this.setState({search: value.target.value, do_search: false})\n  }\n\n  selectPokemon = (pokemon) => {\n    this.setState({selected_pokemon: pokemon})\n  }\n\n  render() {\n\n    let pokelist = <PokemonList clear={true} selected={this.selectPokemon}/>\n    if(this.state.do_search){\n      pokelist = <PokemonList data={this.state.search} do_search={this.state.do_search} selected={this.selectPokemon} />\n    }\n\n    let pokemoninfo = <></>\n    if(this.state.selected_pokemon !== undefined){\n        pokemoninfo = <PokemonInfo data={this.state.selected_pokemon}/>\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n        <table style={{width: '100%'}}>\n          <tr>\n            <td className=\"title-text\">\n              <img className=\"title-img\" src={'Pokemon_logo.svg'} alt=\"Pokemon\" />\n              <span>Pokedex</span>\n            </td>\n            <td>\n              <img style={{float:'right'}} src={'Search_2384.png'} alt='search' onClick={e=>this.onsearch(\"search\")}></img>\n              <input className=\"input\" type=\"text\" style={{float:'right'}} placeholder=\"Search...\" value={this.state.search.toUpperCase()} onChange={e => this.searchChange(e)} onKeyDown={this.onsearch} ></input>\n            </td>\n          </tr>\n        </table>\n          <div className=\"title-text\">\n              \n              \n          </div>\n            {pokelist}\n        </div>\n        <div className=\"pokemon-container\" style={{float:'right'}}>\n          {pokemoninfo}\n        </div>\n         \n      </div>\n    );\n  }\n}\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export default __webpack_public_path__ + \"static/media/PKMN RBYGSC.13473224.ttf\";","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport '../src/assets/PKMN RBYGSC.ttf';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}